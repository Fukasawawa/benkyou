#Linux入門

##Linux概要
###コンピュータシステムの基礎
###Linuxとは
###Linuxのユーザの種類

##ログイン・ログアウト
###ログイン
起動すると自動でlogin入力できるようになる
ユーザ名とパスワードを入力するとlogin可能
パスワードは表示されない

###ログアウト・画面のロック
exitコマンド
logoutコマンド
ctrl + dを押す
画面ロックはGUI？

##コマンド
###コマンド
コマンドを打ってenterを押すと実行できる

###オンラインマニュアル
manコマンドでオンラインマニュアルを参照できる
man [セクション] コマンド名
オンラインマニュアルには，コマンドの説明オプションや引数の指定方法，オプションの意味，コマンドの出力内容，関連コマンド，関連ファイルを確認することができる．


##Linuxファイルの基本
###ファイルシステム
###特定のディレクトリを表す用語
###パス名
絶対パスとは，ルートディレクトリから始めて，目的のファイルまでに通過するディレクトリを順に並べ，それぞれを/で区切ったもの
/home/sakura
/-
 |-home-
 |     |-sakura

相対パスカレントディレクトリを起点としてファイルやディレクトリの場所を示す方法
カレントディレクトリ/home/sakura
目的のファイル（絶対パス）/home/sakura/data/image.jpg
相対パス data/image.jpg
/-
 |-home-   ↓now
 |     |-sakura-
 |     |       |-data-   ↓purpose
 |     |       |     |-image.jpg

 カレントディレクトリ/home/sakura/data
 目的のファイル（絶対パス）/home/sakura/img/image.jpg
 相対パス ../img/image.jpg
 /-
  |-home-
  |     |-sakura-  ↓now
  |     |       |-data
  |     |       |
  |     |       |-img-    ↓purpose
  |     |       |    |--image.jpg

シェル上でカレントディレクトリを.一つ上のディレクトリを..と示す
~はユーザによって異なる
 sakuraがユーザの時~は/home/sakuraである
 他のユーザのホームディレクトリを示すときは~の後にユーザ名を指定する
  example: ~miki = /home/miki

###ファイルとディレクトリの表示

##テキストデータの表示
###テキストデータの表示
テキストデータを表示するコマンドはcatである
cat [ファイル名]
指定したファイルを先頭行から末尾まですべて画面上に表示する
1画面に入りきらない大きさのファイルを表示すると画面に入らなかった部分はスクロールして流れてしまう
そんなときにはmoreコマンドを使う
more [ファイル名]
moreコマンドを使うと一部分が画面に表示され画面の左下に先頭から何%が表示されたか示される
moreコマンドの主な操作:
 space 次のページを表示する
 enter 1行下にスクロールする
 v viエディタを起動する
 = 現在の行番号を表示する
 : f ファイル名と現在の行番号を表示する
 ? ヘルプ画面を表示する
moreを使いやすくしたものがless
lessコマンドの主な操作
 moreコマンドの操作方法はそのまま使える（: fは使えない）
 q 終了する
 f 次のページを表示する
 b 前のページを表示する
 ↑ 1行上にスクロールする
 ↓ 1行下にスクロールする
 /文字列 下方向に文字列検索する
  nを押すと順方向shift+nを押すと逆方向へとヒットした箇所に移動する
 ?文字列 上方向に文字列検索する

ファイルの先頭部分だけ表示するにはheadコマンド
ファイルの末尾部分だけ表示するにはtailコマンド
デフォルトではそれぞれ10行だけ表示する
オプションに-行数で指定すると出力する行数を調節できる

###テキストデータ内の文字列検索
/文字列や?文字列で検索可能

##viエディタ
###viエディタとは
テキストファイルが記録されたファイルを編集するにはテキストエディタを用いる
LinuxではviエディタとEmacsが代表的なエディタがある
とりわけviエディタはLinux以外のUNIX系OSでも広く使われる
主なテキストエディタ
 vi     UNIX全般で使われているエディタ
 Emacs  非常に高機能なエディタ
 Pico   簡単な操作性のエディタ
 nano   Picoを拡張したエディタ
 Gedit  GNOME(GUI)の標準エディタ

###viエディタの起動
viエディタを起動するにはviコマンドを実行する
vi [ファイル名]
行頭に~がついている行には何も情報がない

###viによる編集操作の基礎
各コマンドの前に数字を打つとその回数分だけ同じ動作を繰り返す
コマンド
 :q       セーブせずに終了
 :q!      変更した行もセーブせずに終了
 :w       セーブするが終了しない
 :wq      セーブして終了

 ESC      コマンドモードへ変更
 i        現在のカーソル位置から編集モードへ
 R        現在のカーソル位置から置換
 A        現在行の末尾から編集モード
 O        現在行の前に行挿入して編集モードへ
 o        現在行の次に行挿入して編集モード

 h(←)     左
 j(↓)     下
 k(↑)     上
 l(→)     右
 0        行頭へ
 $        行末へ
 [Enter]  次の行の先頭へ
 w        次の単語へ
 b        前の単語へ
 ctrl+f   次の画面へ
 ctrl+b   前の画面へ
 1G       文頭へ
 G        文末へ
 nnG      nn行目へ

 x        1文字削除
 dd       1行削除
 cw       1語変更
 c$       カーソル位置から行末まで変更
 dw       1語削除
 d$       カーソル位置から行末まで削除

 /正規表現 前方検索
 ?正規表現 後方検索
 n        次の候補
 N        前の候補

 :1,$s/正規表現/置き換え文字列/g
          文書内のすべての「正規表現」を「置き換え文字列」に置換

  yy      1行コピー
  dd      1行カット
  p       ペースト

  .       直前の変更操作の繰り返し
  u       直前の変更操作の取り消し
  :r xxx  ファイルxxxの内容を次の行に挿入
  :r! xxx ファイルxxxの内容を次の行に挿入
  :h      日本語マニュアルを表示

viエディタのカスタマイズは.vimrmファイルに記述する
viエディタの主な設定
  set number        行番号を表示する
  set nu            行番号を表示する（省略表記）
  set autoindent    自動インデントを使う
  set ai            自動インデントを行う（省略表記）
  set cindent       C言語のインデントを使う
  set list          行末やタブ文字など特殊文字を表示する
  set tabstop=タブ幅 タブ幅を設定する
  set ts=タブ幅      タブ幅を設定する（省略表記）
  set hlsearch      検索結果をハイライト表示する
  set nohlsearch    検索結果をハイライト表示しない
  set nohls         検索結果をハイライト表示しない（省略表記）
  set wrapscan      末尾まで検索したら最初に戻る
  set showmatch     括弧の対応を指し示す
  set whichwrap=b,s,h,l,<,>,[,]
                  行頭や行末を超えてカーソル移動を行う
grepコマンドはテキストファイル内の文字列を検索し条件にマッチした行を抜き出して表示する
検索パターンには正規表現を用いる
grep [パターン] [ファイル]
grepコマンドの主なオプション
  -c    マッチした行数だけを表示する
  -i    大文字と小文字を区別する
  -l    マッチした行のあるファイル名のみを表示する
  -n    行番号も表示する
  -v    マッチしなかった行も表示する
  -N    該当行の前後N行も合わせて表示する
  -A N  該当行の後のN行も併せて表示する
  -B N  該当行の前のN行も併せて表示する
  -C N  -Nと同じ(デフォルトは2行)
  -E    拡張正規表現を使用する
  -F    パターンを正規表現ではなく固定文字列として扱う

##ファイル操作
###作成
touchコマンドによりからの新規ファイルを作成することができる
本来touchコマンドは指定したファイルやディレクトリのタイムスタンプを変更するコマンドだが存在しないファイルを指定するとからの新規ファイルが生成される
touchコマンドの主なオプション
 -d 日時を指定する
 -c ファイルを新規作成しない
 -r 他のファイルのタイムスタンプに合わせる
 -m ctimeのみ変更する

###コピー
ファイルをコピーするにはcpコマンドを用いる
cp [オプション] コピー元ファイル名 コピー先ファイル名
cp [オプション] コピー元ファイル名 コピー先ディレクトリ名
cpコマンドの主なオプション:
 -i ファイルを上書きしてもよいか確認する
 -f 確認無しでファイルを上書きする
 -r ディレクトリをコピーする

###移動・名前の変更
ファイルを移動するにはmvコマンドを用いる
mv [オプション] 移動元ファイル名 移動先ファイル名
mv [オプション] 移動元ファイル名 移動先ディレクトリ名
mvコマンドの主なオプション:
 -i ファイルを上書きしてもよいか確認する
 -f 確認無しでファイルを上書きする
mvコマンドはファイル名変更にも用いられる
mv [オプション] 変更前ファイル名 変更後ファイル名

###削除
ファイルの削除にはrmコマンドを用いる
rm [オプション] ファイル名
rmコマンドの主なオプション:
 -i ファイルを削除してもよいか確認する
 -f 確認無しでファイルを削除する
 -r，-R ディレクトリ丸ごと削除する

##ファイルのアクセス制御
###ファイル保護の仕組み
ファイルやディレクトリを作成すると，作成したユーザは所有者となる．
ファイルの所有者にはファイルのアクセス権を管理する権限が与えられる
作成したユーザが所属するグループがファイルの所有グループとして設定される
所有者と所有グループは，lsコマンドに-lオプションをつけて実行すると確認できる

ファイルを書き換えられないように，ファイルやディレクトリにはアクセス権が設定されている
アクセス権はパーミッションといわれる
ファイルのアクセス権には，次の3種類がある
 ファイルの内容を読み出す権限(r:read)
 ファイルに書き込む権限(w:write)
 ファイルを実行する権限(x:execute)
これらのアクセス権を次の3つのグループそれぞれに対して設定できる
 ファイルの所有者
 ファイルの所有グループに属しているユーザ
 その他のユーザ
パーミッション情報はls -lコマンドで確認できる
パーミッション情報の例：rwxr-xr--
左から3文字ずつファイルの所有者のアクセス権，ファイルの所有グループのアクセス権，その他のユーザのアクセス権を表す
rは読み取り可能wは書き込み可能，xは実行可能，-は該当部分のアクセス権がないことを示す
r w x r - x r - -
|---| |---| |---|
  1     2     3
1 : 所有者のアクセス権
2 : 所有グループのアクセス権
3 : その他ユーザのアクセス権
rootユーザだけはパーミッションをすべて無視することができる
アクセス権は数値で表すことができる
 読み取り権：4
 書き込み権：2
 実行権　　：1
これを、所有者，所有グループ，その他ユーザごとに足し合わせる
アクセス権のない-は0とみなす
r w x r - x r - -
|---| |---| |---|
  ↓     ↓     ↓
4+2+1 4+0+1 4+0+0
  ↓     ↓     ↓
  7     5     4
この例ではパーミッションを数値で表すと754となる

###パーミッションの変更
アクセス権を変更するにはchmodコマンドを用いる
chmodコマンドによってアクセス権を変更できるのはファイル所有者とrootユーザのみ
chmod [-R] アクセス権 ファイル名またはディレクトリ名
アクセス権はパーミッションを数値化したものか辞表の記号を用いる
chmodコマンドのアクセス件表記
　  | u 所有者
対  | g 所有グループ
象  | o その他のユーザ
　  | a すべてのユーザ
--------------------------
操  | + アクセス権を追加
作  | - アクセス権を削除
　  | = アクセス権を指定
--------------------------
 権 | r 読み取り許可
 利 | w 書き込み許可
　  | x 実行許可
指定したディレクトリ以下すべてのアクセス権を変更したいとき-Rオプションを指定する

##プロセス
###プロセスとは
CUI操作を行うためのインターフェースプログラムがシェル
シェルはユーザからのコマンド入力を受け付け，解釈し，必要なプログラムを実行
ユーザはカーネルを直接操作できない．カーネルの周囲に貝殻のように存在するためシェルという
シェルにはいくつかの種類がある
多くのディストリビューションでは，bashが標準のシェルとして採用されている．
###プロセスの確認
###シグナルの使用したプロセスの終了

##シェルの機能
###シェルとは
コマンド入力を受け付けて処理をするインターフェースとなるプログラムをシェルという
キーボードから入力するとシェルがコマンドを認識し適切な実行プログラムを起動する

###対話型機能
シェルには様々な種類がある
多くのディストリビューションでは複数のシェルを用意しユーザが自由に選べるようになっている
システムで利用可能なシェルは/etc/shellsで確認できる
主なシェル
  sh    UNIX系OSの基準となるシンプルなシェル
  ksh   shの機能を強化したシェル
  bash  shを改良して大幅に機能を拡張したシェル
  csh   shよりも対話的な機能に優れたシェル
  tcsh  cshの機能を拡張したシェル
  zsh   bash，ksh，tcshに独自の機能を盛り込んだ多機能シェル
多くのディストリビューションではbashが標準的なシェルとして採用

コマンドラインで利用できるコマンドには内部コマンドと外部コマンドがある
内部コマンドはシェル本体に内蔵されているコマンドで組み込みコマンドという
外部コマンドは/binや/usr/binディレクトリいかに配置されている実行プログラム
bashの主なコマンド
  alias     エイリアスを表示・設定する
  unalias   エイリアスを削除する
  pwd       カレントディレクトリを表示する
  cd        カレントディレクトリを変更する
  jobs      ジョブを表示する
  fg        ジョブをフォアグラウンドで実行する
  bg        ジョブをバックグラウンドで実行する
  kill      シグナルを送信する
  echo      引数を表示する
  history   コマンド履歴を表示する
  help      組み込みコマンドのヘルプを表示する
  umask     umask値を表示設定する
  set       シェルの機能を制御する
  unset     変数を削除する
  export    変数をエクスポートする
  source    スクリプトを読み込み現在のシェルで実行する
  test      条件式を評価する
  read      文字列を読み込んで変数に代入する
  exit      シェルを終了する

コマンドラインにコマンドを入力するとシェルはまず内部コマンドを調べコマンド名がマッチすればそれを実行
内部コマンドに見つからなければ外部コマンドを検索

bashの主なキー操作
  tab     コマンドやパス名を補完する
  ctrl+a  行の先頭にカーソルを移動する
  ctrl+e  行の末尾にカーソルを移動する
  ctrl+l  画面をクリアする
  ctrl+r  インクリメンタルサーチを実地する
  ctrl+c  実行中の処理を中断する
  ctrl+s  画面への出力を停止する
  ctrl+q  画面への出力を再開する
  ctrl+z  実行中の処理を一時停止する
  ctrl+d  ログアウトする

コマンドを;で区切ると左側から連続で実行する
コマンドを&&で区切ると1つめのコマンドが正しく実行できた場合にのみ2つめのコマンドを実行する
コマンドを||で区切れば1つめのコマンドが正しく実行できなった場合に2つめのコマンドを実行する

historyコマンドでコマンドの履歴を確認できる
コマンド履歴の操作
  ctrl+p or ↑     1つ前のコマンドラインを表示する
  ctrl+n or ↓     1つ後のコマンドラインを表示する
  !!              直前に実行したコマンドラインを再実行する
  !番号           指定した履歴番号のコマンドを再実行する
  ^文字列1^文字列2 直前のコマンドラインにある文字列1を文字列2に変更して再実行する

ファイルの検索で*は任意の文字列を表す
メタキャラクタといわれる
主なシェルのメタキャラクタ
  *          0文字以上の任意の文字列にマッチする
  ?          任意の1文字にマッチする
  [文字列]   []内の任意の1文字にマッチする
  [!文字列]  []内の任意の1文字以外にマッチする

''で囲まれた文字列はすべて文字であるとみなされる
シェル上ではスペースが区切り文字として使われる
しかし''で囲むとスペースもファイル名に利用できる

""で囲まれた文字列はいくつかの特殊文字を除いて文字であるとみなされる

###標準入出力の制御
コマンドの実行結果をファイルに保存したいときにリダイレクトを用いる
リダイレクト>を使うとコマンドの実行結果を画面に出力せずファイルへの出力に切り替える
リダイレクトの書式
  コマンド > ファイル名          コマンドの実行結果をファイルに書き込む
  コマンド >> ファイル名         コマンドの実行結果をファイルに追記する
  コマンド 2> ファイル名         コマンドのエラー出力をファイルに書き込む
  コマンド 2>> ファイル名        コマンドのエラー出力をファイルに追記する
  コマンド > ファイル名 2>&1     コマンドの実行結果とエラー出力をファイルに書き込む
  コマンド >> ファイル名 2 >&1   コマンドの実行結果とエラー出力をファイルに追記する

リダイレクトはコマンドの出力をファイルに書き込む
コマンド出力の出力を別のコマンドの入力にするにはパイプ|を用いる
コマンド1 | コマンド2
コマンド1の出力はコマンド2の標準入力に贈られる
コマンド2で処理された後標準出力に出力する

コマンドの出力を別のコマンドとファイルに出力したい場合teeコマンドを用いる
コマンド1 tee ファイル名 | コマンド2

headコマンドはファイルの先頭部分のみを出力する
デフォルトでは10行出力される
head [-行数] [ファイル名]

tailコマンドはファイルの末尾部分のみを出力する
デフォルトでは10行出力される
tail [-行数] [ファイル名]

wcコマンドはファイルの行数や文字数をカウントできる
wc [オプション] [ファイル名]
オプションを指定しない場合はファイルの行数，単語数，バイト数が表示される
wcコマンドの主なオプション
  -c  バイト数のみを表示する
  -l  行数のみ表示する
  -w  単語数のみ表示する

sortコマンドは行単位でソートして表示できる
sort [オプション] [+開始位置] [-終了位置] [ファイル名]
オプションを指定しない場合は行の最初の1文字目をアルファベット順にソートして表示する
sortコマンドの主なオプション
  -b  行頭の空白を無視してソートする
  -f  大文字と小文字を区別しないでソートする
  -r  降順にソートする
  -n  数字を文字としてではなく数値としてソートする

###環境調整機能
シェルでは変数を利用できる
シェル変数と呼ばれ値を定義したり参照したりできる
変数は自由に定義できるが環境の設定などに使われる変数は基本的に大文字の変数を持っている

シェルが利用できる主な変数
  HISTFILE      コマンド履歴を保存するファイル
  HISTFILESIZE  コマンド履歴ファイルに保存するコマンド履歴数
  HISTSIZE      コマンド履歴の保持数
  HOME          ホームディレクトリのパス
  HOSTNAME      ホスト名
  LANG          使用する言語環境
  PATH          コマンドサーチパス
  PS1           プロンプトの書式
  PS2           二次プロンプトの書式
  PWD           カレントディレクトリのパス
  SHELL         現在のシェル
  TERM          端末の種類
  USER          ユーザ名

変数の値の確認には文字列をひょじするechoコマンドが利用できる
echo $変数名
変数は$変数名で参照できる
シェル上では$記号を変数名につけると文字列ではなく変数として認識される

変数名=値
=の前後にスペースを入れるとエラーが起きてしまう

unsetを使うことで変数を削除できる
ここでは$はつける必要はない
unset 変数名

変数を定義したシェルを終了させるとその変数の内容は失われる

環境変数は定義したシェルに加えそのシェルから起動した別のシェルやプログラム上でも変数を利用できる
環境変数はexportコマンドを使って定義できる
export 変数名[=値]

例えばexport VAR=CentOSとしてその後bashにより新しいシェルを起動してもecho $VARによりCentOSと出力できる

定義済みの環境変数はpritenvコマンドで確認することができる
またsetコマンドを実行するとすべてのシェル変数と環境変数が表示される

##リモートコマンド
###ホストとは
###リモートログイン
###ファイル転送

##ファイル管理コマンド
###ファイルの検索
locateコマンドによりファイル名でファイルを検索することができる
locate ファイル名またはディレクトリ名
指定するのはファイル名の一部でも検索可能
引数に指定した文字列にマッチしたパスが表示される
ファイル名データベースは通常1日に1回程度更新される
データベースの更新以後に作成したファイルは検索結果に反映されない
ファイル名データベースを更新するにはrootユーザでupdatedbコマンドを実行する

findコマンドを使うとファイル名をはじめとして様々な条件で検索することができる
また検索結果に対しファイルを削除するといったアクションを起こすことができる
find [検索ディレクトリ] [検索式]
検索ディレクトリは検索対象のトップディレクトリを指定する
省略した場合カレントディレクトリを起点として検索

findコマンドの検索式
  オプション
    -maxdepth N 検索するディレクトリの深さの最大値を指定する
    -xdev       他のファイルシステムにあるディレクトリは検索しない
  判別式
    -name ファイル名   ファイル名を指定する
    -size N           ファイルサイズを指定する10c=10byte,10k=10kbyte,+10k=10kbyte以上,-10k=10kbyte以下
    -atime N          最終アクセス日時を指定する
    -amin N           最終アクセスをN分前で指定する
    -mtime N          最終修正日時を指定する
    -mmin N           最終更新をN分前で指定する
    -ctime N          最終の属性変更日時を指定する
    -cmin N           最終の属性更新をN分前で指定する
    -perm モード      アクセス権を指定する
    -perm -モード     指定した許可属性ビットがすべて立っている
###圧縮・解凍
###アーカイブファイル


#Javaプログラミング入門

##Javaの概要
###Javaの開発環境
###プログラム開発手順

##定数と変数
###基本データ型，参照型
###定数，変数
###初期化と代入

##演算子
###算術演算子，代入演算子
###関係演算子，論理演算子
###演算子の優先順位
###データ型が異なる演算
###型変換

##制御文
###条件分岐
###繰り返し文，ループの制御
###ネスト

##配列
###配列の宣言と初期化
###要素の使用
###多次元配列

##クラスとメソッド
###クラスとメソッド
###引数と戻り値
###メソッドの定義
###メソッドの呼び出し
