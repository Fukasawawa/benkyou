#Linux入門

##Linux概要
###コンピュータシステムの基礎
###Linuxとは
###Linuxのユーザの種類

##ログイン・ログアウト
###ログイン
起動すると自動でlogin入力できるようになる
ユーザ名とパスワードを入力するとlogin可能
パスワードは表示されない

###ログアウト・画面のロック
exitコマンド
logoutコマンド
ctrl + dを押す
画面ロックはGUI？

##コマンド
###コマンド
コマンドを打ってenterを押すと実行できる

###オンラインマニュアル
manコマンドでオンラインマニュアルを参照できる
man [セクション] コマンド名
オンラインマニュアルには，コマンドの説明オプションや引数の指定方法，オプションの意味，コマンドの出力内容，関連コマンド，関連ファイルを確認することができる．


##Linuxファイルの基本
###ファイルシステム
###特定のディレクトリを表す用語
###パス名
絶対パスとは，ルートディレクトリから始めて，目的のファイルまでに通過するディレクトリを順に並べ，それぞれを/で区切ったもの
/home/sakura
/-
 |-home-
 |     |-sakura

相対パスカレントディレクトリを起点としてファイルやディレクトリの場所を示す方法
カレントディレクトリ/home/sakura
目的のファイル（絶対パス）/home/sakura/data/image.jpg
相対パス data/image.jpg
/-
 |-home-   ↓now
 |     |-sakura-
 |     |       |-data-   ↓purpose
 |     |       |     |-image.jpg

 カレントディレクトリ/home/sakura/data
 目的のファイル（絶対パス）/home/sakura/img/image.jpg
 相対パス ../img/image.jpg
 /-
  |-home-
  |     |-sakura-  ↓now
  |     |       |-data
  |     |       |
  |     |       |-img-    ↓purpose
  |     |       |    |--image.jpg

シェル上でカレントディレクトリを.一つ上のディレクトリを..と示す
~はユーザによって異なる
 sakuraがユーザの時~は/home/sakuraである
 他のユーザのホームディレクトリを示すときは~の後にユーザ名を指定する
  example: ~miki = /home/miki

###ファイルとディレクトリの表示

##テキストデータの表示
###テキストデータの表示
テキストデータを表示するコマンドはcatである
cat [ファイル名]
指定したファイルを先頭行から末尾まですべて画面上に表示する
1画面に入りきらない大きさのファイルを表示すると画面に入らなかった部分はスクロールして流れてしまう
そんなときにはmoreコマンドを使う
more [ファイル名]
moreコマンドを使うと一部分が画面に表示され画面の左下に先頭から何%が表示されたか示される
moreコマンドの主な操作:
 space 次のページを表示する
 enter 1行下にスクロールする
 v viエディタを起動する
 = 現在の行番号を表示する
 : f ファイル名と現在の行番号を表示する
 ? ヘルプ画面を表示する
moreを使いやすくしたものがless
lessコマンドの主な操作
 moreコマンドの操作方法はそのまま使える（: fは使えない）
 q 終了する
 f 次のページを表示する
 b 前のページを表示する
 ↑ 1行上にスクロールする
 ↓ 1行下にスクロールする
 /文字列 下方向に文字列検索する
  nを押すと順方向shift+nを押すと逆方向へとヒットした箇所に移動する
 ?文字列 上方向に文字列検索する

ファイルの先頭部分だけ表示するにはheadコマンド
ファイルの末尾部分だけ表示するにはtailコマンド
デフォルトではそれぞれ10行だけ表示する
オプションに-行数で指定すると出力する行数を調節できる

###テキストデータ内の文字列検索
/文字列や?文字列で検索可能

##viエディタ
###viエディタとは
テキストファイルが記録されたファイルを編集するにはテキストエディタを用いる
LinuxではviエディタとEmacsが代表的なエディタがある
とりわけviエディタはLinux以外のUNIX系OSでも広く使われる
主なテキストエディタ
 vi     UNIX全般で使われているエディタ
 Emacs  非常に高機能なエディタ
 Pico   簡単な操作性のエディタ
 nano   Picoを拡張したエディタ
 Gedit  GNOME(GUI)の標準エディタ

###viエディタの起動
viエディタを起動するにはviコマンドを実行する
vi [ファイル名]
行頭に~がついている行には何も情報がない

###viによる編集操作の基礎
各コマンドの前に数字を打つとその回数分だけ同じ動作を繰り返す
コマンド
 :q       セーブせずに終了
 :q!      変更した行もセーブせずに終了
 :w       セーブするが終了しない
 :wq      セーブして終了

 ESC      コマンドモードへ変更
 i        現在のカーソル位置から編集モードへ
 R        現在のカーソル位置から置換
 A        現在行の末尾から編集モード
 O        現在行の前に行挿入して編集モードへ
 o        現在行の次に行挿入して編集モード

 h(←)     左
 j(↓)     下
 k(↑)     上
 l(→)     右
 0        行頭へ
 $        行末へ
 [Enter]  次の行の先頭へ
 w        次の単語へ
 b        前の単語へ
 ctrl+f   次の画面へ
 ctrl+b   前の画面へ
 1G       文頭へ
 G        文末へ
 nnG      nn行目へ

 x        1文字削除
 dd       1行削除
 cw       1語変更
 c$       カーソル位置から行末まで変更
 dw       1語削除
 d$       カーソル位置から行末まで削除

 /正規表現 前方検索
 ?正規表現 後方検索
 n        次の候補
 N        前の候補

 :1,$s/正規表現/置き換え文字列/g
          文書内のすべての「正規表現」を「置き換え文字列」に置換

  yy      1行コピー
  dd      1行カット
  p       ペースト

  .       直前の変更操作の繰り返し
  u       直前の変更操作の取り消し
  :r xxx  ファイルxxxの内容を次の行に挿入
  :r! xxx ファイルxxxの内容を次の行に挿入
  :h      日本語マニュアルを表示

viエディタのカスタマイズは.vimrmファイルに記述する
viエディタの主な設定
  set number        行番号を表示する
  set nu            行番号を表示する（省略表記）
  set autoindent    自動インデントを使う
  set ai            自動インデントを行う（省略表記）
  set cindent       C言語のインデントを使う
  set list          行末やタブ文字など特殊文字を表示する
  set tabstop=タブ幅 タブ幅を設定する
  set ts=タブ幅      タブ幅を設定する（省略表記）
  set hlsearch      検索結果をハイライト表示する
  set nohlsearch    検索結果をハイライト表示しない
  set nohls         検索結果をハイライト表示しない（省略表記）
  set wrapscan      末尾まで検索したら最初に戻る
  set showmatch     括弧の対応を指し示す
  set whichwrap=b,s,h,l,<,>,[,]
                  行頭や行末を超えてカーソル移動を行う
grepコマンドはテキストファイル内の文字列を検索し条件にマッチした行を抜き出して表示する
検索パターンには正規表現を用いる
grep [パターン] [ファイル]
grepコマンドの主なオプション
  -c    マッチした行数だけを表示する
  -i    大文字と小文字を区別する
  -l    マッチした行のあるファイル名のみを表示する
  -n    行番号も表示する
  -v    マッチしなかった行も表示する
  -N    該当行の前後N行も合わせて表示する
  -A N  該当行の後のN行も併せて表示する
  -B N  該当行の前のN行も併せて表示する
  -C N  -Nと同じ(デフォルトは2行)
  -E    拡張正規表現を使用する
  -F    パターンを正規表現ではなく固定文字列として扱う
##ファイル操作
###作成
touchコマンドによりからの新規ファイルを作成することができる
本来touchコマンドは指定したファイルやディレクトリのタイムスタンプを変更するコマンドだが存在しないファイルを指定するとからの新規ファイルが生成される
touchコマンドの主なオプション
 -d 日時を指定する
 -c ファイルを新規作成しない
 -r 他のファイルのタイムスタンプに合わせる
 -m ctimeのみ変更する

###コピー
ファイルをコピーするにはcpコマンドを用いる
cp [オプション] コピー元ファイル名 コピー先ファイル名
cp [オプション] コピー元ファイル名 コピー先ディレクトリ名
cpコマンドの主なオプション:
 -i ファイルを上書きしてもよいか確認する
 -f 確認無しでファイルを上書きする
 -r ディレクトリをコピーする

###移動・名前の変更
ファイルを移動するにはmvコマンドを用いる
mv [オプション] 移動元ファイル名 移動先ファイル名
mv [オプション] 移動元ファイル名 移動先ディレクトリ名
mvコマンドの主なオプション:
 -i ファイルを上書きしてもよいか確認する
 -f 確認無しでファイルを上書きする
mvコマンドはファイル名変更にも用いられる
mv [オプション] 変更前ファイル名 変更後ファイル名

###削除
ファイルの削除にはrmコマンドを用いる
rm [オプション] ファイル名
rmコマンドの主なオプション:
 -i ファイルを削除してもよいか確認する
 -f 確認無しでファイルを削除する
 -r，-R ディレクトリ丸ごと削除する

##ファイルのアクセス制御
###ファイル保護の仕組み
ファイルやディレクトリを作成すると，作成したユーザは所有者となる．
ファイルの所有者にはファイルのアクセス権を管理する権限が与えられる
作成したユーザが所属するグループがファイルの所有グループとして設定される
所有者と所有グループは，lsコマンドに-lオプションをつけて実行すると確認できる

ファイルを書き換えられないように，ファイルやディレクトリにはアクセス権が設定されている
アクセス権はパーミッションといわれる
ファイルのアクセス権には，次の3種類がある
 ファイルの内容を読み出す権限(r:read)
 ファイルに書き込む権限(w:write)
 ファイルを実行する権限(x:execute)
これらのアクセス権を次の3つのグループそれぞれに対して設定できる
 ファイルの所有者
 ファイルの所有グループに属しているユーザ
 その他のユーザ
パーミッション情報はls -lコマンドで確認できる
パーミッション情報の例：rwxr-xr--
左から3文字ずつファイルの所有者のアクセス権，ファイルの所有グループのアクセス権，その他のユーザのアクセス権を表す
rは読み取り可能wは書き込み可能，xは実行可能，-は該当部分のアクセス権がないことを示す
r w x r - x r - -
|---| |---| |---|
  1     2     3
1 : 所有者のアクセス権
2 : 所有グループのアクセス権
3 : その他ユーザのアクセス権
rootユーザだけはパーミッションをすべて無視することができる
アクセス権は数値で表すことができる
 読み取り権：4
 書き込み権：2
 実行権　　：1
これを、所有者，所有グループ，その他ユーザごとに足し合わせる
アクセス権のない-は0とみなす
r w x r - x r - -
|---| |---| |---|
  ↓     ↓     ↓
4+2+1 4+0+1 4+0+0
  ↓     ↓     ↓
  7     5     4
この例ではパーミッションを数値で表すと754となる

###パーミッションの変更
アクセス権を変更するにはchmodコマンドを用いる
chmodコマンドによってアクセス権を変更できるのはファイル所有者とrootユーザのみ
chmod [-R] アクセス権 ファイル名またはディレクトリ名
アクセス権はパーミッションを数値化したものか辞表の記号を用いる
chmodコマンドのアクセス件表記
　  | u 所有者
対  | g 所有グループ
象  | o その他のユーザ
　  | a すべてのユーザ
--------------------------
操  | + アクセス権を追加
作  | - アクセス権を削除
　  | = アクセス権を指定
--------------------------
 権 | r 読み取り許可
 利 | w 書き込み許可
　  | x 実行許可
指定したディレクトリ以下すべてのアクセス権を変更したいとき-Rオプションを指定する

##プロセス
###プロセスとは
CUI操作を行うためのインターフェースプログラムがシェル
シェルはユーザからのコマンド入力を受け付け，解釈し，必要なプログラムを実行
ユーザはカーネルを直接操作できない．カーネルの周囲に貝殻のように存在するためシェルという
シェルにはいくつかの種類がある
多くのディストリビューションでは，bashが標準のシェルとして採用されている．
###プロセスの確認
###シグナルの使用したプロセスの終了

##シェルの機能
###シェルとは
###対話型機能
###標準入出力の制御
###環境調整機能

##リモートコマンド
###ホストとは
###リモートログイン
###ファイル転送

##ファイル管理コマンド
###ファイルの検索
###圧縮・解凍
###アーカイブファイル


#Javaプログラミング入門

##Javaの概要
###Javaの開発環境
###プログラム開発手順

##定数と変数
###基本データ型，参照型
###定数，変数
###初期化と代入

##演算子
###算術演算子，代入演算子
###関係演算子，論理演算子
###演算子の優先順位
###データ型が異なる演算
###型変換

##制御文
###条件分岐
###繰り返し文，ループの制御
###ネスト

##配列
###配列の宣言と初期化
###要素の使用
###多次元配列

##クラスとメソッド
###クラスとメソッド
###引数と戻り値
###メソッドの定義
###メソッドの呼び出し
